Theaters, Members, and Movies:
  name: theaters
  table: theaters
  models:
    - name: members
      table: members
      constraints:
        - type: reference
          parent: id
          name: tid
        - type: reference
          parent: partition
          name: partition
      models:
        - name: demos
          table: demographics
          constraints:
            - type: reference
              parent: id
              name: member_id
          models:
            - name: phone_numbers
              table: phone_numbers
              constraints:
                - type: reference
                  parent: id
                  name: demographic_id
        - name: movies
          table: movies
          constraints:
            - type: reference
              parent: id
              name: member_id
        - name: favorite_comic_movies
          table: movies
          constraints:
            - type: reference
              parent: id
              name: member_id
            - type: static
              name: genre
              value: comic
        - name: favorite_mystery_movies
          table: movies
          constraints:
            - type: reference
              parent: id
              name: member_id
            - type: static
              name: genre
              value: mystery
        - name: favorite_comedy_movies
          table: movies
          constraints:
            - type: reference
              parent: id
              name: member_id
            - type: static
              name: genre
              value: comedy
    - name: ticket_prices
      table: ticket_prices
      constraints:
        - type: reference
          parent: id
          name: theater_id

Theaters and Movies with Derived Models:
  name: theaters
  table: theaters
  models:
    - name: ticket_prices
      table: ticket_prices
      constraints:
        - type: reference
          parent: id
          name: theater_id
    - name: effective_ticket_prices
      type: derived
      constraints:
        - type: reference
          parent: id
          name: theater_id
      query:
        model: theaters.ticket_prices
        filters:
        # Coearce the join to theater_ticket_pricing_effective_dates to an inner join:
        - key_path: theater_ticket_pricing_effective_dates.theater_id
          type: not_equals
          value:
        given:
        - name: theater_ticket_pricing_effective_dates
          model: theaters.ticket_prices
          # Not sure I like this. `theaters.ticket_prices` is probably more intuitive.
          # The user has to know that the enclosing query is already scoped to ticket_prices.
          parent_model: ticket_prices
          constraints:
          - name: theater_id
            parent: theater_id
          - name: effective_date
            parent: effective_date
          fields:
          - key_path: theater_id
          - key_path: effective_date
            aggregator: max
          filters:
          - key_path: effective_date
            type: less_than_or_equal_to
            value: '2017-01-01'

Theaters, Members, and Movies with Derived Models Directed Graph Based with Nested Sub-models:
  theaters:
  ticket_prices:
    relationships:
      theaters:
        constraints:
          - type: reference
            parent: id
            name: theater_id
  effective_ticket_prices:
    relationships:
      theaters:
        constraints:
          - type: reference
            parent: id
            name: theater_id
    query:
      from: ticket_prices
      filters:
        # Coearce the join to theater_ticket_pricing_effective_dates to an inner join:
        - key_path: theater_ticket_pricing_effective_dates.theater_id
          type: not_equals
          value:
      given:
        - name: theater_ticket_pricing_effective_dates
          from: ticket_prices
          relationships:
            ticket_prices:
              constraints:
                - name: theater_id
                  parent: theater_id
                - name: effective_date
                  parent: effective_date
          fields:
            - key_path: theater_id
            - key_path: effective_date
              aggregator: max
          filters:
            - key_path: effective_date
              type: less_than_or_equal_to
              value: '2017-01-01'

Reverse Polymorphic Example:
  # In this example, an animal has a toy, but that toy is either a dog or cat toy, depending on
  # the type of the animal.  So for this to work in this direction, static constraints pointed
  # at the parent (animals) is needed.
  name: animals
  models:
    - name: dog_toy
      table: dog_toys
      constraints:
        - parent: toy_id
          name: id
        - type: static
          parent: type
          value: Dog
    - name: cat_toy
      table: cat_toys
      constraints:
        - parent: toy_id
          name: id
        - type: static
          parent: type
          value: Cat

Partitioner Example 1:
  name: dogs
  table: animals
  partitioners:
    - name: type
      value: Dog
    - name: deleted
      value: false

Partitioner Example 2:
  name: owners
  models:
    - name: dogs
      table: animals
      constraints:
        - name: owner_id
          parent: id
      partitioners:
        - name: type
          value: Dog
        - name: deleted
          value: false

Patients:
  name: patients
  models:
    - name: patient_payments
      constraints:
        - type: reference
          parent: id
          name: patient_id
    - name: patient_field_values
      constraints:
        - type: reference
          parent: id
          name: patient_id
      models:
        - name: fields
          constraints:
            - type: reference
              parent: field_id
              name: id
